apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: monitoring
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 72.4.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  interval: 8h0m0s
  install:
    createNamespace: true
  targetNamespace: monitoring
  values:
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          kubernetes.io/ingress.class: nginx
        hosts:
          - alertmanager.stag.devkuban.com
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          kubernetes.io/ingress.class: nginx
        hosts:
          - prometheus.stag.devkuban.com
      prometheusSpec:
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}

    # Add a simple test PrometheusRule that will create a PrometheusRule named
    # `test-alerts` in the monitoring namespace. The alert `TestAlert` uses
    # `vector(1)` and will be active immediately â€” useful for validating the
    # alerting pipeline (prometheus -> alertmanager -> receivers).
    additionalPrometheusRulesMap:
      node-high-cpu:
        groups:
          - name: node.rules
            rules:
              - alert: NodeHighCPUUsage
                expr: |
                  (1 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m]))
                    / avg by (instance) (irate(node_cpu_seconds_total[5m])))) * 100 > 80
                for: 5m
                labels:
                  severity: critical
                annotations:
                  summary: "Node CPU usage is above 80%"
                  description: |
                    Node {{ $labels.instance }} CPU usage is > 80% for more than 5 minutes.
                    Value: {{ printf "%.2f" $value }}%
                    This indicates the node is under high CPU pressure and may affect pods running on it.

    grafana:
      enabled: true
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          kubernetes.io/ingress.class: nginx
          # nginx.ingress.kubernetes.io/ssl-redirect: "true"
        hosts:
          - grafana.stag.devkuban.com
        # tls:
        #   - secretName: wildcard-stag-devkuban-com-tls
        #     hosts:
        #       - grafana.stag.devkuban.com
    